apiVersion: v1
kind: BuildConfig
metadata:
  name: cd-pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
              agent any
              stages {
                stage("Clone Frontend Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: '*/master']],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'cds-frontend']
                                ],
                                userRemoteConfigs: [[url: 'https://github.com/CitiVelociti/VelocitiFrontend.git']]
                            ])
                  }
                }
                stage("Clone Backend Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: '*/master']],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'cds-backend']
                                ],
                                userRemoteConfigs: [[url: 'https://github.com/CitiVelociti/EquityTradingPlatform-Backend.git']]
                            ])
                  }
                }
                stage("Build Frontend Image") {
                  steps {
                    dir('cds/velociti-frontend/') {
                      sh 'cp Dockerfile-frontend Dockerfile'
                      sh 'oc start-build cd --from-dir . --follow && rm Dockerfile'
                    }
                  }
                }
                stage("Create Build For Database Server") {
                  steps {
                    dir('cds/Solutions/workspace/CompactDiscDaoWithRestAndBoot') {
                      sh 'oc new-build --strategy docker --binary --name mysql || echo "Build already exists"'
                    }
                  }
                }
                stage("Build Database Image") {
                  steps {
                    dir('cds/Solutions/workspace/CompactDiscDaoWithRestAndBoot') {
                      sh 'cp Dockerfile-mysql Dockerfile'
                      sh 'oc start-build mysql --from-dir . --follow && rm Dockerfile'
                    }
                  }
                }
                stage("Create persistent storage") {
                  steps {
                    dir('cds/Solutions/workspace/CompactDiscDaoWithRestAndBoot') {
                      sh '(oc get PersistentVolumeClaim | grep mysql-claim0) || oc apply -f openshiftnew/mysql-claim0-persistentvolumeclaim.yaml'
                    }
                  }
                }
                stage("Create Deployment Config") {
                  steps {
                    dir('cds/Solutions/workspace/CompactDiscDaoWithRestAndBoot') {
                      sh '(oc get deploymentconfig | grep mysql) || oc apply -f openshiftnew/mysql-deploymentconfig.yaml'
                      sh '(oc get deploymentconfig | grep cd) || oc apply -f openshiftnew/cd-deploymentconfig.yaml'
                      sh 'oc expose svc/cd || echo "cds already exposed"'
                    }
                  }
                }
                stage("Create Services and rollout deployment") {
                  steps {
                    dir('cds/Solutions/workspace/CompactDiscDaoWithRestAndBoot') {
                      sh '(oc get svc | grep mysql) || oc apply -f openshiftnew/mysql-service.yaml'
                      sh '(oc get svc | grep cd) || oc apply -f openshiftnew/cd-service.yaml'
                    }
                  }
                }
                stage("Create Public route") {
                  steps {
                    dir('cds/Solutions/workspace/CompactDiscDaoWithRestAndBoot') {
                      sh '((oc get route | grep cd) && echo "cd already exposed") || oc expose svc/cds'
                      sh 'echo "Internet route is `oc get route | awk \'{print $2}\' | grep cds`"'
                    }
                  }
                }
                stage("Clean up on Isle 4") {
                  steps {
                    dir('cds/Solutions/workspace/CompactDiscDaoWithRestAndBoot') {
                      sh 'oc delete pods `oc get pods | grep \'0/1\' | awk \'{print $1}\'`'
                    }
                  }
                }
              }
            }
    type: JenkinsPipeline
  triggers: []
